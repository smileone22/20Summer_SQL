*KEYWORD
- Data vs Information
- DB, DBMS란?
- 개발환경: Oracle 설치
- 데이터모델링의 이해 

[ Data vs Information ] 
  DATA                         INFORMATION 
  자료                           정보

ex) 스타벅스 마케팅 부서 근무
20대 성인들이 자주 마시는 커피 신메뉴 개발 
사람들이 많이 마시는 커피 메뉴: 자료 
->   20대 성인들이 마시는 커피: 정보 (자료를 가공해놓은 것)

정보란, 내 목적에 맞게 자료를 가공한 것 
1. 자료를 어떻게 잘 구성할 것인가 : 데이터 모델링
2. 자료를 어떻게 사용할 수 있는가 : SQL (Structed Query Language), 명령, 쿼리 


[DB,DBMS 란]
Database
: 여러 사람들이 공유하여 사용할 목적으로, 통합 관리하기 위한 데이터의 집합 

Database Management System
: 모아놓은 데이터의 집합(데이터베이스)들을 관리하기 위한 프로그램, 시스템


[DBMS로 Oracle 설치]
https://www.oracle.com/database/technologies/xe-prior-releases.html
오라클 계정 만들어서 로그인 후 다운로드 
win+R
cmd
sqlplus 
password: 1234
username: system
-------------------------------------------------
select *from All_users;
-------------------------------------------------
앞으로 DBMS 사용하기 위한 나만의 계정 정보 
ID: dbms
PW: 1234

계정 생성: CREATE USER 계정 아이디 IDENTIFIED BY 비밀번호;
권한부여: GRANT ALL PRIVILEGES TO  계정아이디;
계정 로그인(접속) 방법: CONN 계정아이디/계정비밀번호;
보여주는 방법: SHOW USER;

ex. 학생 정보
학번, 이름, 과  - (1, 홍길동, 컴퓨터과) 


1) 테이블 생성
CREATE TABLE 테이블명( snum int, name varchar2(10), subject varchar2(10) );
2) 테이블 구조 확인 명령 
DESC 테이블명;
3) 테이블에 데이터 넣기 
INSERT INTO 테이블명 VALUES (1, '홍길동', '컴퓨터');
4) 테이블에 저장된 데이터 확인하기 
SELECT * FROM 테이블명;


[데이터 모델링]
"데이터가 어떻게 구성이 되어 있는가?"
-데이터 모델링
-엔티티
-속성 
----------------------------------------------------------
1. 데이터 모델링
정의
모델링(modeling) : 모형 제작
데이터 모델링 (data modeling) : 데이터의 구조 제작 
목적
업무 목적에 맞는 시스템 구축을 위해 어떤 데이터가 필요한지 데이터 분석 
모델링의 3가지 관점
데이터 관점 what : 무슨 데이터와 관련, 데이터의 관계
 프로세스 관점 how : 업무가 하고 있는 일은 어떤 것인가
 데이터와 프로세스의 상관 관점 interaction : 업무가 처리하는 일이 데이터에 어떤 영향을 주는가
데이터모델링의 특징
 추상화: 현실세계를 일정한 형식에 맞추어 표현
ex. 몇번 손님이, 어떤 것을 주문했는가? 1번 손님이 바닐라라떼를 주문했다, 2번 손님이 모카를 주문했다
 단순화 : 복잡한 현실세계를 약속에 의해 제한된 표기법이나 언어로 표현
1번 남자 29 아메리카노, 2번 여자 30 모카 
 명확화 : 누구나 이해하기 쉽게 정확하게 현상 기술
주관적 이야기x, 객관적으로 기술 

*특징으로 본 데이터 모델링의 정의
: 복잡한 현실세계를 일정한 표기법에 의해 표현하는 것 

데이터 모델링의 3단계
추상화 수준에 따라 개념적, 논리적, 물리적 모델링(개눈물)
1. 개념적 모델링
: 현실세계의 데이터를 추상화를 통해서 개념세계의 데이터로 표현하는 과정

2. 논리적 모델링
: 개념세계의 개체 타입을 DBMS가 사용하는 논리적 데이터 모델로 변환시키는 과정

3. 물리적 모델링
: 데이터가 저장될 수 있도록 논리적 데이터 모델을 물리적 구조로 변환시키는 과정

*기출문제 용어
전사적: 기업 전체의
EA: Enterprise Architecture: 조직의 프로세스, 정보 시스템 기능을 기술

데이터 모델링 중요성
1. 파급효과
시스템 구축이 완성된 시점에서 데이터 모델을 변경할 경우,
많은 작업이 소모, 초기 데이터모델링을 통한 데이터 설계가 중요 

2. 복잡한 요구사항의 간결한 표현 가능 - 단순화 
요구사항 파악을 하기 위해서 가장 좋은 방법은 많은 글로 적는 것이 아니라, 간결하게 핵심만 적는 것이 더 효율적이다

3. 데이터의 품질 향상 가능 
많은 데이터를 저장하는 것이 좋은 것이 아니라 얼마나 정확한 데이터인가가 중요

데이터 모델링 유의성
1. 중복: 데이터의 중복 저장
: 데이터 모델은 여러 사람들이 같은 데이터를 상용할 수 있기 때문에, 
각각의 사람들이 여러 장소에 중복으로 같은 정보를 저장하지 않도록 해야한다

2. 비유연성(inflexibility) 
: 데이터가 변경이 되더라도 데이터베이스에 큰 변화가 없도록 해야하는 것

3. 비일관성(데이터의 불일치)
: 데이터와 데이터간 상호연관 관계를 명확하게 정의
ex. 코로나 확진자 동선, 코로나 확진자
코로나 확진자를 업데이트 하지 않고, 코로나 확진자 동선만 갱신할 경우

데이터 베이스의 3단계 구조
데이터 구조를 어떤 관점으로 보는가에 따라 나뉨
-외부단계: 각 개인의 입장으로 보는 관점
-개념적 단계: 모든 사용자가 보는 관점
-내부적 단계: 물리적 저장장치 입장 관점


스키마
: 데이터베이스의 구조와 제약조건에 관한 설명서(명세서)

2. 엔티티(Entity)와 속성
개념
우리말로 실제, 객체라고 번역 가능
: 업무의 필요하다고 유용한 정보를 저장하고 관리하기 위한 개체
-명사로 적기 
entity 과목  - 인스턴스 수학 . 영어
entity 강사 -  인스턴스 이춘식, 조시형 


엔티티와 인스턴스와 속성관의 관계
- 엔티티는 2개 이상의 속성을 가져야한다. 
- 엔티티는 2개 이상의 인스턴스를 포함해야 한다. 
- 하나의 엔티티의 인스턴스는 다른 엔티티의 인스턴스간의 관계가 있어야 한다. 

엔티티의 분류

1. 유형, 무형에 따른 분류
- 유형 엔티티: 물리적인 형태 존재
ex. 사원, 물품, 강사, 교수
- 개념 엔티티: 물리적인 형태 존재하지 않고, 관리해야할 개념적 정보
ex. 강의
- 사건 엔티티: 업무를 수행함에 있어 발생되는 엔티티
ex. 주문, 지도

2. 발생 시점에 따른 분류
- 기본 엔티티: 업무에 원래 존재하는 정보
ex. 부서, 고객, 상품
- 중심 엔티티: 기본엔티티로부터 발생, 업무의 중심적인 역할
ex. 계약, 주문, 매출
- 행위 엔티티: 두개 이상의 엔티티로부터 발생되며 자주 내용이 바뀌는 정보
ex. 주문 목록, 사원변경이력
------------------------------------------------------------
[ERD: Entity-Relation Diagram] 
: 엔티티와 엔티티간의 갖는 관계를 보기 좋게 표현한 조직도

엔티티: 사각형
속성: 타원
관계: 마름모 

[엔터티와 속성]
엔터티는 속성들에 의해 설명된다
-속성은 업무에서 필요로하는 인스턴스에서 관리하고자하는 의미상 더 이상 분리되지 않는 최소의 데이터 단위이다 
ex. 엔터티- 강사: 속성들 -이름, 주소, 생년원일, 계약일자, 전문분야 
-한개의 속성은 한개의 속성값을 갖는다 ex. 이름- 가길동
-ie표기법, baker 표기법
1. 기본속성: 업무 분석을 통해 바로 정의한 속성
2. 설계속성: 설계를 하면서 도출해내는 속성
3. 파생속성: 다른 속성에 영향을 받아 발생하는 속성
ex. 학생 성적의 평균
-주의할 점: 어떤 속성에 영향을 받는지 정의되어야 한다
-----------------------------------------------------------------

[도메인-domain]
: 각 속성이 가질 수 있는 값의 범위
학생 점수: 0~100
학생 성별: 남자, 여자
-> 엔티티 내에서 속성에 대한 데이터 타입, 크기, 제약사항을 지정하는 것 

-----------------------------------------------------------------
[관계]

[관계의 분류]
엔티티와 엔티티간의 연관성이 어떤 목적으로 연결되었느냐에 따라 분류
1) 존재에 의한 관계: 점선으로 표기(의존관계)
2) 행위에 의한 관계: 실선으로 표기(행위관계)

[관계 표기법]
1. 관계명: 관계 이름
2. 관계차수: 1:1, 1:M, M:N
3. 관계 선택사항: 필수관계, 선택관계(0)


만약, 지하철 문이 닫히지 않았는데 지하철 출발
어떤사람 머리, 발만 탔는데 출발하는 일이 발생
지하철 문이 닫힌다 - 지하철 출발 : 필수 관계
안내 방송            - 지하철 출발: 선택 관계


------------------------------------------------------------------------
[식별자- identifiers ] 
엔티티는 여러개의 인스턴스의 집합 
과목- 수학, 과학, 영어
각 인스턴스를 구분할 수 있는 것이 필요한데 
이 구분자가 바로 식별자다!

<식별자>
정의: 하나의 엔티티에 구성되어 있는 여러 속성 중 
각 인스턴스를 구분할 수 있는 속성

업무적 용어: 식별자
관계형데이터모델링: 키(key)

<식별자의 특징>
- 유일성: 인스턴스를 구분하는 식별자는 유일해야 한다

- 최소성: 식별자는 여러개의 속성으로 구성될 수 있는데, 꼭 필요한 속성들로만 최소한으로 구성되어야 한다
ex. 학생 엔티티에서 인스턴스를 식별할 때 
학번으로 구분-> 식별자: 학번 속성
여러개의 학교에서 학번으로는 한 개의 인스턴스를 식별할 수 없다 
학번+학교번호 -> 식별자: 학번, 학교번호 속성
- 불변성: 식별자가 지정되면, 속성값은 변경되면 안된다
ex. 학번이 식별자가 되면, 학번은 변경되면 안된다
- 존재성: 식별자가 지정된 속성은 반드시 속성값이 존재해야 한다
ex. 학번이 식별자면, 학생 인스턴스는 학번에 해당하는 값을 가지고 있어야 한다


<식별자의 분류>
1. 대표성을 갖는가?
	1) 주식별자: 엔티티 내에서 각 인스턴스를 구분할 수 있는 속성
	2) 보조식별자: 엔티티 내에서 각 인스턴스를 구분할 수 없는 속성
2. 엔티티 내에서 스스로 생성되었는가?
	1) 내부식별자: 엔티티 내부에서 스스로 만들어진 식별자
	2) 외부식별자: 다른 엔티티와의 관계를 통해 받아온 식별
3. 식별자를 이루는 속성의 갯수는 몇개인가?
	1) 단일 식별자: 하나의 속성으로 구성된 식별자
	2) 복합 식별자: 둘 이상의 속성으로 구성된 식별자
4. 대체하기 위해 생성했는가?
	1) 본질 식별자: 업무에 의해 만들어진 식별자
	2) 인조 식별자: 업무적으로 만들어진 식별자는 아니나, 본질 식별자가 너무 복잡해서 인위적으로 만든 식별자

=========================================================
[키의 종류]
1. 후보키: 여러개의 튜플(인스턴스의 row)들 중에서 유일하게 식별할 수 있는 속성들의 부분집합 
- 유일성, 최소성을 만족해야 한다 

2. 기본키(Primary Key): 후보키에서 선택된 주 키
- 유일성, 최소성, 존재성, 불변성도 만족해야 한다.

3. 대체키: 후보키가 둘 이상일 때 선택되지 못한 나머지 후보키(보조키)

4. 슈퍼키: 튜플을 식별하는 식별자를 구성하는 속성들의 집합으로 이뤄진 키들
- 유일성 만족하지만 최소성은 만족하지 않는다

5. 외래키(Foreign Key): 관계를 맺고 있는 다른 테이블에서 가져온 기본키

==========================

[관계형 데이터 모델링 핵심]
1. 데이터 무결성
2. 이상현상
3. 정규화
========================== 

1. 데이터 무결성? 
데이터가 정확성, 일관성, 유효성이 유지되는 것

정확성: 데이터는 애매하지 않아야함
일관성: 각 사용자가 일관된 데이터를 볼 수 있어야 한다
유효성: 실제 존재하는 데이터야 한다

1) 개체 무결성(Entity integrity)
: 모든 테이블이 기본키로 선택된 컬럼을 갖고 있어야 한다
-기본키로 선택된 컬럼은 고유한 값을 가지며, 빈 값은 허용하지 않음

2) 참조 무결성
: 테이블간의 관계가 있을 때, 두 테이블은 항상 일관된 값을 갖도록 유지해야 한다
ex. 성적 테이블에서 과목 테이블의 과목 번호를 참조할 때
과목테이블이 변경되면, 같이 변경되어야 한다

3) 도메인 무결성
: 테이블에 존재하는 컬럼의 무결성을 보장하기 위한 것으로서 필드의 타입, 값의 범위가 
올바르게 입력이 되었는지 확인
ex. 주민등록번호에 알파벳이 입력된 경우에는 도메인 무결성이 깨짐
-----------------------------------------------------

[이상현상]
좋은 관계형 데이터베이스의 설계목적이 이상현상이 발생하지 않도록 설계

이상현상 종류?
1) 갱신 이상(Modification Anomaly)
: 중복되어 사용된 데이터를 일부만 변경하여 불일치가 발생되는 문제
-> 모든 튜플의 값을 변경해야 한다

2) 삭제 이상(Deletion Anomaly)
: 데이터 삭제 시 필요한 데이터까지 함께 삭제되어 데이터 손실이 발생하는 문제
->
ex. 만약 홍길동이 데이터베이스 수업을 듣고 싶지 않아, 수강취소를 하면, 홍길동의 모든 데이터를 삭제해야 함 

3) 삽입 이상(Insertion Anomaly)
: 데이터 삽입시 불필요한 정보를 함께 삽입해야 하는 문제
ex. 새로운 편입생 둘리가 왔는데 아직 과목을 수강한 적이 없으면 속성(과목명)에 Null 이 삽입되어 개체 무결성에 어긋남

-> 이상 현상이 발생하는 이유가 데이터 설계시 "정규화"를 하지 않고 설계를 했기 때문

-----------------------------------------------------

[정규화]
테이블의 구성을 논리적으로 변경하여, 이상현상을 해결하고자 하는 것
1차 정규화: 속성값은 원자값을 갖는다
2차 정규화: 모든 컬럼은 완전 함수적 종속을 만족해야 한다 (부분함수 종속 제거)
완전함수적 종속 <-> 부분함수적 종속
3차 정규화: 이행적 함수종속 제거
