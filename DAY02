
DAY02 

[복습]
정규화: 테이블의 구성을 논리적으로 변경하여 이상현상을 해결하고자 하는 것
	1차 정규화: 모든 컬럼의 값이 원자값을 가져야 한다
	2차 정규화: 부분함수적 종속 관계 제거
	3차 정규화: 이행적 함수 종속 관계 제거 
	x->y, y->z, x->z 제거 
	BCNF: 후보키가 아닌 컬럼이 다른 컬럼을 결정하는 것을 제거



[반정규화]
: 정규화가 되어 있는 테이블을 다시 정규화 이전 상태로 돌리는 것 

- 정규화의 문제점?
: 테이블을 너무 많이 정규화 하면, 테이블 조회시 해야하는 명령이 너무 길어져서 조회 효율을 떨어뜨릴 수 있다.

-반정규화시 주의사항
	1) 반정규화가 필요한 대상인지 조사 필요
		-대상은 자주 사용하는 테이블
		-조회 시 지나치게 많은 조인이 필요할 경우
	2) 다른 방법을 유토 검토
		-뷰로 처리할 수 있는 조회는 뷰를 생성해서 처리
		뷰? 가상 테이블 

-반정규화 적용 종류
>테이블 반정규화
>속성 반정규화
>관계 반정규화



지금까지는 데이터가 어떤 구조를 이뤄야 하고, 어떻게 값을 저장해야 하는지 데이터 모델링을 간단하게 보았다면, 
실제로 데이터를 저장하고, 사용할 수 있는 SQL에 대해서 알아보자 
-----------------------------------
SYSTEM: 오라클 자체 갖고 있는 관리자 계정
DBMS: 우리가 만든 사용자 계정
DDL:  사용자 권한에서 할 수 있는명령
DCL:  권리자 권한에서 할 수 있는 명령
======================
*KEYWORD
-DDL(data definition language): CREATE, ALTER, DROP
-DCL(data control language): GRANT, REVOKE
-DML(data manipulation language): INSERT, UPDATE, DELETE 
-TCL: COMMIT, ROLLBACK
======================

데이터 사이클:
		DDL		DML
C reate	CREATE	INSERT
R ead		SELECT	SELECT
U pdate	ALTER		UPDATE
D elete		DROP		DELETE

======================
*주의하기
1. SQL 명령문과 키워드 대소문자 구분안함
2. 문자열은 '홀따옴표'를 사용한다
-> 문자열 내에서 대소구분한다
3. 여러 줄에 거쳐 명령문 입력 가능
4. 명령 끝나면 ; 찍기
5. DML 명령은 COMMIT이 되어야만 저장이 된다


======================

[ DDL: Data Definition Language: 데이터 정의어 ] 
종류
>CREATE: 생성
>ALTER: 수정
>DROP: 삭제

< DDL, CREATE > 
: 사용자 권한에서 할 수 있는명령
1. 사용자 생성 
	CREATE USER [사용자계정] IDENTIFIED BY [비밀번호];

	사용자 전체 조회: SELECT * FROM All_users;
	사용자 삭제: DROP USER [사용자계정] cascade;
	계정 접속: CONN [사용자계정]/[비밀번호]; (하지만 권한이 있어야 접속 가능)
		*사용자가 접속할 수 있는 권한이 없으면 명령 실패
		ERROR:
		ORA-01045: user DBMS lacks CREATE SESSION privilege; logon denied
2. 테이블 생성 
	1) 사용자 계정 접속 
		CONN DBMS/1234;
	2) CREATE TABLE 테이블명 (
	컬럼명 컬럼타입 제약조건,
	컬럼명 컬럼타입 제약조건,
	컬럼명 컬럼타입 제약조건, );
	
	3)테이블 구조 조회
		DESC 테이블명

	4) 현재 사용자가 생성한 테이블의 테이블명 조회
		-SELECT TNAME FROM TAB;
		-SELECT TABLE_NAME
		 FROM ALL_TABLES
		 WHERE ONER=''

	ex. student 테이블 
	컬럼명	컬럼타입	제약조건
	snum 	정수형	기본키(기본키는 유일성, 최소성, 존재성만족해야함으로 NULL허용X)
	name	문자열	빈칸허용 안함
	birth	문자열
	gender	문자열
	hobby	문자열
	SQL> CREATE TABLE student(
  	2  snum NUMBER PRIMARY KEY,
  	3  name VARCHAR2(20) NOT NULL,
  	4  birth VARCHAR2(20),
  	5  gender VARCHAR2(20),
  	6  hobby VARCHAR2(20));

	Table created.

	*오라클에서 사용하는 컬럼타입
	>문자형
	 	VARCHAR2(n):	가변길이 문자열 데이터, n: 크기 
	 	CHAR(n):		고정 길이 문자열 데이터, n 고정
	 	CLOB:		대용량 텍스트
	>숫자형
	 	NUMBER
	 	NUMBER(p,s):	정수랑 실수 가능, p:precision:유효자릿수, s:scale: 소수점 자리수
	>날짜형
	 	DATE:	고정길이 날짜(시간 데이터 포함)
	>이진데이터
	 	BLOB:	대용량 이진 데이터

	*제약 조건
	> NOT NULL :	NULL 값을 허용하지 않음
	> PRIMARY KEY: 	기본 키 지정 
	
			
<DDL, ALTER >
1. 사용자 계정 변경 - ALTER USER
:비밀 번호 변경, 이름명은 X
	ALTER USER [사용자계정] IDENTIFIED BY [수정할 비밀번호];

2. 테이블 수정 - ALTER TABLE
:컬럼의 타입, 제약 조건, 컬럼명 변경
:컬럼을 추가, 삭제 
	1) 컬럼의 타입, 제약조건 변경
		ALTER TABLE [테이블명]
		MODIFY(
		컬럼명1 수정할컬럼타입1 수정할 제약조건1,
		컬럼명2 수정할컬럼타입2 수정할 제약조건2,
		);

		ex1. student 테이블에서 name 컬럼의 컬럼타입을 CHAR(20)으로 변경
		SQL> ALTER TABLE STUDENT
  		2  MODIFY(
  		3  NAME CHAR(20));
		Table altered.
		
		ex2. student 테이블에서 name 컬럼이 NULL을 허용하도록 변경
		컬럼타입 변경안할시 그대로 적기 
		SQL> ALTER TABLE STUDENT
 		2  MODIFY(
  		3  NAME CHAR(20) NULL );
		Table altered.

		ex3. student 테이블에서 birth 컬럼의 컬럼타입을 날짜형식으로 변경
		SQL> ALTER TABLE STUDENT
  		2  MODIFY(
  		3  BIRTH DATE);
		Table altered.


	2) 테이블의 컬럼명 바꾸기
		ALTER TABLE [테이블명]
		RENAME COLUMN [이전 컬럼명] TO [수정컬럼명];

		ex. student 테이블에서 snum 컬럼명을 id로 바꾸기 
		SQL> ALTER TABLE STUDENT
  		2  RENAME COLUMN snum TO id;
		Table altered.

	3) 테이블 명 변경
		RENAME [기존 테이블명] TO [바꿀 테이블명];

		ex. student 테이블을 student2 테이블로 변경
		SQL> RENAME STUDENT TO STUDENT2;
		Table renamed.
	
	4) 컬럼 추가 
		ALTER TABLE [테이블명]
		ADD(
		컬럼명 컬럼타입 제약조건,
		컬럼명 컬럼타입 제약조건);
		
		ex. student 테이블에서 전화번호(phone) 칼럼을 추가해라
		단, 최대 문자열 20개의 길이까지 입력할 수 있으며, NULL을 허용하며, 중복을 허용하지 않는다.
 		SQL> ALTER TABLE student
  		2  ADD(
  		3  phone VARCHAR2(20) UNIQUE);
		Table altered.
		* NULL 은 기본 조건으로 생략가능 
		* UNIQUE: 중복을 허용하지 않는 제약조건 

	5) 컬럼 삭제
		ALTER TABLE [테이블명]
		DROP([컬럼명]);
		
		ex. student 테이블의 전화번호 칼럼을 삭제해라
		SQL> ALTER TABLE student
  		2  DROP(phone);
		Table altered.

	6) 기본키 삭제
		ex. student 테이블에서 기본키를 삭제해라 
		SQL> ALTER TABLE student
  		2  DROP PRIMARY KEY;
		Table altered.


<DDL, DROP>
1. 테이블 삭제
	DROP TABLE [테이블명];

===============================

[DCL: Data Control Language: 데이터 조작어]

< DCL, GRANT >
:사용자 권한 부여
:권리자 권한에서 할 수 있는 명령
	GRANT [부여할 권한] TO [사용자 계정];

-권한 종류
	1) connect: DB 접속을 위한 권한
	2) resource: 테이블 생성 권한
	3) create view: 뷰 생성 권한
	4) create procedure: 프로시저를 생성 권한

-기타 권한-> sysdba 권한이 있는 계정만 가능
	sysoper:  사용자 계정 생성 등 관리자 권한 (system)
	sysdba: 최고 관리자 권한 (sys)

*connect 가 실패하면, 모든 계정에서 로그아웃 되므로, 다시 접속해야 한다

*사용자에게 부여한 권한을 확인하려면, 
	1) 관리자 계정으로 접속 
		CONN system/1234;
	2) SELECT granted_role FROM dba_role_privs 
	   WHERE grantee='사용자계정(대문자)';
	- 조회 시, 사용자 계정은 무조건 대문자로!
	3) 권한 중, create view. create procedure 는 
	SELECT privilege FROM dba_sys_privs
	WHERE grantee='DBMS';
< DCL, REVOKE >
:  권한 뺏기
	REVOKE [부여한 권한] FROM [사용자 계정];

---------------------------------------

[ 정리 ]
CREATE USER: SYSTEM 에서 DBMS 계정 생성
GRANT 권한: SYSTEM 에서 DBMS 권한 부여
SELECT GRANTED ~ : SYSTEM에서 DBA_ROLE_PRIVS 테이블 조회
ALTER USER: DBMS에서 사용자 비밀번호 변경 
REVOKE 권한 FROM 계정: SYSTEM에서 DBMS 권한 뺏기

--------------------------------------

[VARCHAR2 와 CHAR의 차이 ] 

SQL> SELECT * FROM STUDENT;

      SNUM NAME       BIRTH      GENDER     HOBBY
---------- ---------- ---------- ---------- ----------
  20200001 Kim        2001-12-24 남자       음악감상
  20200002 Park       2001-01-24 여자       게임
  20200003 Song       2001-05-07 남자

 SQL> SELECT LENGTH(name) FROM student;

LENGTH(NAME)
------------
           3
           4
           4

SQL> ALTER TABLE student
  2  MODIFY (name char(20));

Table altered.

SQL> SELECT LENGTH(name) FROM student;

LENGTH(NAME)
------------
          20
          20
          20
============================




[ DML: Data Manipulation Language: 데이터 조작어 ]
:INSERT, UPDATE, DELETE 

< DML, INSERT >
: 테이블에 데이터 삽입시 사용
	1)부분적으로 삽입
	INSERT 
	INTO [테이블명](컬럼명1, 컬럼명2 ...)
	VALUES(값1, 값2 ...)
	
	2)전체 컬럼에 값을 넣을 경우, 컬럼명 지정없이 사용 가능 
	INSERT 
	INTO

	INSERT INTO student
	(snum, name) VALUES (1, '가길동');

	INSERT INTO student
	VALUES (2, '나길동', 20);

	ex. hero 테이블을 만들고 데이터를 넣는 실습
	단, 번호는 PK로 지정, 이름은 문자열 최대 20글자, NULL 허용 안함, 나이는 숫자형 
	SQL> CREATE TABLE hero(
  	2  num NUMBER PRIMARY KEY,
  	3  name VARCHAR2(20) NOT NULL,
	4  age NUMBER);
	Table created.
	SQL> INSERT
  	2  INTO hero(num, name, age) VALUES (1, '아이언맨', 30);
	1 row created.
	SQL> INSERT                                           
 	2  INTO hero(num, name, age) VALUES (2, '헐크', 20); 
	1 row created.
	SQL> INSERT                                       
	2  INTO hero(num, name, age) VALUES (3, '스파이더맨', 17);
	1 row created.
	
	너무 불편!!!
	-> 한번에 여러개의 데이터 넣는 방법(서브쿼리)
	-dual 테이블 사용 
	dual table: 오라클의 더미 테이블 
 		INSERT ALL
		INTO 테이블명(컬럼명..) VALUES(값..)
		INTO 테이블명(컬럼명..) VALUES(값..)
		..
		SELECT * FROM DUAL;
	
	*TRUNCATE 테이블명;
	테이블의 내용을 전체 삭제 방법 -> DELETE 보다 처리 속도 빠르고 대용량 data 처리에 유리
	SQL> TRUNCATE TABLE hero;
	Table truncated.
	
	SQL> INSERT ALL
  	2  INTO hero VALUES(1,'아이언맨',30)
  	3  INTO hero VALUES(2, '헐크', 20)
  	4  INTO hero VALUES(3, '스파이더맨',17)
   	5  SELECT * FROM DUAL;
 	3 rows created.
		
           ex2. member 테이블을 만들어라
	id는 number, PK
	name은 varchar2(20)
	age number
	phone varchar2(20)
	regdate date,default 현재날짜
	*default 제약조건?
		데이터 삽입 시 값을 입력하지 않으면, default로 지정된 값으로 추가되라
	SQL> CREATE TABLE member(
  	2  id  NUMBER PRIMARY KEY,
  	3  name VARCHAR2(20),
  	4  age NUMBER,
  	5  phone VARCHAR2(20),
  	6  regdate DATE DEFAULT sysdate);
	Table created.                                                                                                                                                                                                                                                                                                                                                                 SQL> INSERT INTO member
 	2  VALUES( 1,'June',20,'010-1234-1234','2020-3-24');
	
	SQL> set linesize 100; 
		*SET LINESIZE 숫자; 
		:한 라인에 숫자만큼의 문자 출력
	SQL> col phone for a15;
		*COL 컬럼명 FOR 자릿수; 
		:컬럼의 자릿수 지정 (문자 자릿수:a숫자, 숫자자릿수 지정:999(3자리숫자))
	
	SQL> INSERT INTO member
  	2  (id, name, age, phone) VALUES (2, 'Sunny', 30, '010-1111-1111');
	1 row created.                                                                                                                                                                       SQL> INSERT INTO member
  	2  VALUES( 3,'Faker',25,'010-2222-2222',sysdate);
	1 row created.              
	
	*기본키로 지정된 ID는 중복X, NULL X 이므로 매번 어떤 값이 들어가야 하는지 파악해야하는 번거로움이 발생한다
	-> 자동으로 증가하는 숫자가 들어간다면, 앞으로 어떤 값을 넣어야 하는지 파악할 필요가 없다
	-> 자동으로 숫자가 증가하는 객체를 Oracle에서 제공해준다 -> 시퀀스(Sequence)
		*SEQUENCE
		-시퀀스 생성방법:	CREATE SEQUENCE [시퀀스명];
		-시퀀스  명:	테이블명_seq	
		ex. CREATE SEQUENCE memeber_seq;
		-내가 생성한 시퀀스 확인:	SELECT sequence_name FROM seq;
		-현재 스퀀스 값 확인:	SELECT [시퀀스명].currval FROM dual; 
		-시퀀스 사용하기:		INSERT INTO  [테이블명](컬럼명...) VALUES ([시퀀스명].nextval,값...)
		SQL> INSERT INTO member VALUES(member_seq.nextval,'June',20,'010-2345-1234','2020-3-24');
		SQL> INSERT INTO member VALUES(member_seq.nextval,'Sunny',30,'010-1111-1111',sysdate);
		SQL> SELECT member_seq.currval FROM dual;
		-시퀀스 삭제:		DROP SEQUENCE [시퀀스명];
		-시퀀스 생성 시 시작값 지정:CREATE SEQUENCE [시퀀스명] START WITH [시작값];
		SQL> CREATE SEQUENCE member_seq START WITH 3;
		SQL> INSERT INTO member VALUES(member_seq.nextval,'Faker',25,'010-2222-2222',sysdate);
		SQL> INSERT INTO member VALUES(member_seq.nextval,'Tina',24,'010-1324-4444','2020-05-04');



< DML, UPDATE >
: 테이블 데이터 수정시 사용
	UPDATE [테이블명] 
	SET 컬럼1=수정값1, 컬럼2=수정값2
	WHERE 조건절;
	
	ex. member 테이블에서 Sunny 의 regdate를 2019-10-12로 변경
	SQL> UPDATE member SET regdate='2019-10-12'; 하면 모든 date변경됨
	따라서,
	SQL> UPDATE member SET regdate='2019-10-12' WHERE name='Sunny';
	
	ex2. member 테이블에서 Faker 의 나이를 20으로, 번호를 010-2323-2323 으로 변경
	SQL> UPDATE member SET phone='010-2323-2323',age=20 WHERE name='Faker';


< DML, DELETE >
:테이블의 데이터를 삭제할 때 사용
	1)테이블 데이터 모두 삭제
		DELETE [테이블명];  
	2) 테이블 일부 삭제
		DELETE [테이블명]
		WHERE 조건명;

	ex. member 테이블에서 나이가 20살인 회원을 삭제하라
	SQL> DELETE member WHERE age=20;

