DAY04

[ 복습 ] 

DQL(Data Query Language): SELECT 
SELECT [ 컬럼명 ] FROM [ 테이블명 ]		해당 테이블에서 특정 컬럼 조회
SELECT * FROM [ 테이블명 ]		해당 테이블에서 모든 컬럼 조회
SELECT [컬럼명 ] FROM [테이블명 ]WHERE [조건식]

연산자 
1_산술 연산자 + - * /
숫자+ NULL = NULL -> NULL처리 함수 처리방법 학습

2_연결 연산자: ||

3_논리 연산자: AND OR NOT 

Ctrl + ] : 새로운 스크립트 만드는 단축키

-------------------------------------------------
*KEYWORD
-연산자: is 연산자, 정렬 연산자, 집합 연산자 
-함수 
--------------------------------------------------
[연산자]

1. 기타연산자: is 연산자 
	기능? 컬럼값이 NULL 값인 컬럼을 가져올 때 사용
	형식? SELECT [컬럼명] FROM [테이블명] WHERE [컬럼명] IS NULL; 

	* 실습 * 교수테이블에서 보너스를 받지 않는 교수의 이름, 연봉, 보너스를 조회
	> SELECT NAME, PAY, BONUS FROM T_PROFESSOR WHERE BONUS IS NULL; 
	>단, NULL 값을 조회하려면 =NULL 은 안되고 IS NULL을 활용해야한다!
	
	* 실습 * 교수테이블에서 보너스를 받는 교수의 이름, 연봉, 보너스를 조회
	>SELECT NAME, PAY, BONUS FROM T_PROFESSOR WHERE BONUS IS NOT NULL; 

	* 실습 * 직원테이블에서 교통비를 받지 않는 직원의 이름, 직급, 월급, 교통비를 조회
	> SELECT ename, job, sal, COMM FROM T_EMP WHERE comm IS NULL;


2. 정렬 연산자:
	기능? 컬럼을 기준으로 정렬하여 조회	
	형식? 
	SELECT [컬럼명 ] FROM [테이블명] WHERE [조건식] 
	ORDER BY [정렬기준컬럼명] [ASC or DESC]
	-ORDER BY 숫자 1234 이면 SELECT 한 컬럼의 숫자가 된다
	-ORDER BY 별칭/컬럼명 가능 
	-ASC: 오름차순, DESC: 내림차순

	* 실습 * 학생 테이블에서 학과번호(deptno1)을 기준으로 학과 번호, 학생 이름, 학년을 오름차순으로 조회 
	>SELECT deptno1,name, grade FROM T_STUDENT ORDER BY deptno1 ASC;
	>ASC 생략 가능

	* 실습 * 직원 테이블에서 직원번호를 기준으로 직원 번호, 직원명, 직급, 연봉을 
	직급기준으로 오름차순으로 정렬하되
	직급이 같은 경우, 연봉을 기준으로 내림차순 조회
	>SELECT EMPNO, ENAME, JOB, SAL 
	FROM T_EMP 
	ORDER BY job ASC, sal DESC;
	- 정렬 기준이 2개 이상일 경우, 우선 순위가 큰 조건을 앞에, 더 작은 조건을 뒤에 적어준다! 

3. 집합 연산자 
	기능? 조회된 결과를 대상으로 집합연산을 수행
	집합연산? 
	- 합집합: UNION 
	- 교집합: INTERSECT 
	- 차집합: MINUS 
	주의할 점? 두 집합에서 비교하는 컬럼이 같은 타입이어야 집합 연산 가능
	
	1) 집합연산자: UNION
	: 조회된 두 테이블(집합)의 결과를 한번에 조회 ( 중복은 하나만 )
	사용방법? 
	SELECT [컬럼명] FROM [테이블명1]
	UNION 
	SELECT [컬럼명] FROM [테이블명2] 
		* 실습 * 학생 테이블의 학과번호(deptno1)와 
		교수테이블의 학과번호(deptno1)를 합집합 연산 조회
		>(중복제거)SELECT DISTINCT deptno1 FROM T_STUDENT 
		UNION 
		SELECT DISTINCT deptno FROM T_PROFESSOR;
		>(중복 포함)SELECT deptno1 FROM T_STUDENT 
		UNION ALL 
		SELECT deptno FROM T_PROFESSOR;


	2)집합연산자: INTERSECT
	: 조회된 두 테이블(집합)의 교집합 조회
		* 실습 * 학생 테이블의 학과번호(deptno1)와 교수테이블의 학과번호(deptno1)를 교집합 연산 조회
		>SELECT  deptno1 FROM T_STUDENT  
		INTERSECT  
		SELECT deptno FROM T_PROFESSOR;
		
	3) 집합 연산자: MINUS
	-어느 집합에서 뭘 빼는지가 중요
		* 실습 * 교수테이블의 학과번호(deptno1)에서 학생 테이블의 학과번호(deptno1)를 뺀 연산 조회
 		>SELECT deptno FROM T_PROFESSOR 
		MINUS 
		SELECT  deptno1 FROM T_STUDENT;

------------------------------------------

[함수]
함수란? 입력에 따라 함수 내 연산에 의해서 결과값을 출력하는 것 
ex. f(x) = x+2, f(3) = 5
종류? 
1) 단일행 함수 (Single-Row-Function)
: 테이블의 각각의 데이터에 적용되어 각각의 결과값이 나옴
	1-1) 문자함수
	- INITCAP(문자열): 앞 글자만 대문자로 변경
		ex. SELECT INITCAP('abcd') FROM DUAL; 
	- LOWER(문자열): 모든 글자를 소문자로 변경
		ex. SELECT LOWER('abCD')FROM DUAL;
	- UPPER(문자열): 모든 글자를 대문자로 변경
		ex. SELECT UPPER('abCD')FROM DUAL;
		* 실습 * 학생 테이블에서 학과번호가 201번인 학생의 id, id(대문자), id(앞글자만 대문자)로 조회
		> SELECT id, UPPER(ID) , INITCAP(ID) FROM T_STUDENT WHERE DEPTNO1 =201;
	
	- LENGTH(문자열): 문자열의 전체 길이
		ex. SELECT LENGTH('안녕'),LENGTH('ABCD') FROM DUAL;
	- LENGTHB(문자열): 문자열의 전체 바이트 크기
		ex. SELECT LENGTHB('안녕'),LENGTHB('ABCD') FROM DUAL; - 6 ,4 
		단, 영어/숫자는 한글자에  1byte, 한글은 1글자에 3byte
		* 실습 * 학생 테이블에서 id가 9글자 이상인 학생의 이름과 id 글자수, 이름의 바이트 크기 조회
		> SELECT NAME, id, LENGTH(ID), LENGTHB(id) FROM T_STUDENT WHERE LENGTH(ID)>=9;
	
	- CONCAT(문자열1, 문자열2):  문자열 1과 문자열2를 이어서 출력
		ex. SELECT CONCAT('hello','world') FROM dual; (=SELECT 'hello' || 'world' FROM dual;)
		* 실습 * 교수 테이블에서 교수의 이름과 직급을 하나의 컬럼으로 조회
		> SELECT CONCAT(name,position) from T_PROFESSOR;
	
	- SUBSTR(문자열, start, length) : start 위치부터 length개까지 부분 문자열 조회
		ex. SELECT substr('hello world',1,3) FROM dual; -> hel 
		ex. SELECT substr('hello world',-2,5) FROM dual; -> ld 
		단, 문자열의 시작index 는 1이다 
		단, 문자열은 원형이며 -1은 문자열의 마지막 문자가 된다
		* 실습 * 학생테이블에서 학과번호(deptno1)가 101인 학생의 이름, 주민번호, 생년월일 조회
		> SELECT name, jumin, SUBSTR(JUMIN,1,6) AS BIRTH FROM T_STUDENT WHERE DEPTNO1=101;
		* 실습 * 학생테이블에서 생일이 8월인 학생의 이름, 주민번호, 생년월일 조회
		> SELECT name, jumin, SUBSTR(JUMIN,1,6) AS BIRTHDAY FROM T_STUDENT WHERE substr(jumin,3,2)=08;
		* 실습 * 학생테이블에서 생일이 8월이고 성별이 여자인 학생의 이름, 주민번호, 생년월일 조회
		> SELECT name, jumin, SUBSTR(JUMIN,1,6) AS BIRTHDAY FROM T_STUDENT
		WHERE substr(jumin,3,2)=08 AND substr(jumin,7,1)=2;

	- SUBSTRB(문자열, start, byte size) : start 위치부터 byte 크기만큼 문자열 부분 출력
		* 실습 * SUBSTRB함수를 사용해서 학생테이블에서 학과번호가 101번인 학생의 이름 성만 조회
		> SELECT SUBSTRB(NAME,1,3) FROM T_STUDENT WHERE DEPTNO1=101;
	
	- INSTR (문자열, findstr, start, position) : 문자열에서 findstr을 start 위치부터 시작해서 position 번째 있는 위치 조회
		ex. index1에서 시작해서 첫번째 플러스의 위치를 알려줘:2> SELECT INSTR('a+b+c','+',1,1) FROM dual;
		ex. index1에서 시작해서 첫번째 플러스의 위치를 알려줘:4>SELECT INSTR('a+b+c','+',1,2) FROM dual;
		ex. index3에서 시작해서 첫번째 플러스의 위치를 알려줘:4 > SELECT INSTR('a+b+c','+',3,1) FROM dual;
		ex. index3에서 시작해서 두번째 플러스의 위치를 알려줘:0 (0은 없다는 뜻) > SELECT INSTR('a+b+c','+',3,2) FROM dual; 
		* 실습 * 학생테이블에서 학과번호가 101번인 학생의 이름, 전화번호 조회
		> SELECT name, TEL, INSTR(tel,')',1,1) AS ")위치" FROM T_STUDENT WHERE DEPTNO1=101;
		* 실습 * 
		055)1234-1234에서의 지역번호가 055라면 학생테이블에서 학과번호가 101번인 학생의 지역번호 조회
		> INSTR()로 )의 위치 파악하고 SUBSTR()로 전화번호에서 )전까지의 문자를 부분 조회해야..
		> SELECT DISTINCT SUBSTR(TEL,1, INSTR(tel,')',1,1)-1) FROM T_STUDENT WHERE DEPTNO1=101;
		* 실습 * 
		학생테이블에서 지역번호가 02(서울)인 학생의 이름, 학번, 전화번호 조회
		> SELECT NAME,DEPTNO1,TEL FROM T_STUDENT WHERE SUBSTR(TEL,1, INSTR(tel,')',1,1)-1)=02;
		* 실습 *
		교수테이블에서 email에서 email이 naver이메일을 갖고있는 교수의 이름(name),이메일(email),홈페이지(hpage)조회
		> SELECT name, EMAIL, SUBSTR(email,1,instr(email,'@naver.com',1,1)-1) AS emailid, HPAGE
		FROM T_PROFESSOR
		WHERE EMAIL LIKE '%@naver.com';
		WHERE SUBSTR(email,instr(email,'@',1,1)+1,5)='naver';

	- LPAD(문자열, length, 채움문자): 주어진 문자열을 length 길이만큼 출력하되, 빈 자리를 채움문자로 채워 출력(왼쪽 채움)
		ex. SELECT LPAD('3',4,'#') FROM dual;

	- RPAD(문자열, length, 채움문자): 주어진 문자열을 length 길이만큼 출력하되, 빈 자리를 채움문자로 채워 출력(오른쪽 채움)
		ex.SELECT RPAD('abcd',10,'#') FROM dual;

	- LTRIM(문자열, 제거할문자)
		ex. SELECT LTRIM('기러기', '기') FROM DUAL;

	- RTRIM(문자열, 제거할문자)
		ex. SELECT RTRIM('토마토토', '토') FROM DUAL;
	
	- REPLACE(문자열, 이전문자, 새로운문자)
		ex. SELECT REPLACE('HELLO','L','l') FROM DUAL;
		* 실습 * 학생테이블에서 학과번호가 101인 학생의 이름과 주민번호 조회
		단, 주민번호 뒤 7자리는 *로 조회 
		>SELECT name, replace(jumin, substr(jumin,7,7), '********')
		FROM T_STUDENT
		WHERE DEPTNO1=101;

	1-2) 숫자함수
	- ROUND(값) : 소수점 1번째 자리에서 반올림
		ex. SELECT ROUND(12.34) AS "1" ,ROUND(12.66) AS "2" FROM DUAL; 

	- ROUND(값, 자릿수) : 소수점 자릿수+1번째 자리에서 반올림
		ex. SELECT ROUND(12.356,2) FROM DUAL; > 12.36
		ex. SELECT ROUND(12.356,1) FROM DUAL; > 12.4
		ex. SELECT ROUND(15.526,-1) FROM DUAL; > 자릿수가 0보다 작다면 자릿수위치에서 반올림 

	- TRUNC(값) : 자름(버림)
		ex. SELECT TRUNC(12.66) FROM DUAL; >12

	- TRUNC(값, 숫자) : 숫자면 숫자+1 위치 에서 자름, 마이너스숫자면 숫자위치에서 자름
		ex. SELECT trunc(12.356,2) FROM DUAL;  > 12.35
		ex. SELECT TRUNC(12.356,1) FROM DUAL; >12.3
		ex. SELECT trunc(15.526,-1) FROM DUAL; >10

	- CEIL(값): 소수점 1번째 자리에서 올림 
		ex. SELECT CEIL(12.34) AS "1", CEIL(-3.4) AS "2" FROM dual; > 13, -3
		단, -3.5 < -3 이므로 -3으로 올림이 되나 반올림은 -3.5에서 음수의 진행방향대로 -4로 반올림된다
 
	- FLOOR(값): 내림 
		ex. SELECT FLOOR(12.34) AS "1", FLOOR(-3.4) AS "2" FROM dual; > 12, -4

	- MOD(숫자1, 숫자2) : 숫자1/숫자2의 나머지, 숫자에 실수 넣기 가능
		ex. SELECT MOD(12,5) AS "1" , MOD(12.7,5.4) AS "2 " FROM DUAL;

	- POWER (숫자1, 숫자2) : 숫자1의 숫자2 승 ,숫자2에 분수가 들어가면 루트값도 계산 가능
		ex. SELECT POWER(2,6) AS "1" , POWER(4,1/2) AS "2 ", POWER(81,1/2) AS "3" FROM DUAL;
	
	1-3) NULL 처리 함수
	- NVL(컬럼, 치환할 값):  만약 컬럼의 값이 NULL이면 치환할 값으로 치환 
	
	- NVL2(컬럼, 값1, 값2): 만약 컬럼의 값이 NULL이 아니면 값1, NULL 이면 값2
	
		* 실습 * 
		교수테이블에서 학과번호가 101번인 교수의 이름, 급여, 보너스, 이번달 월급 조회
		>SELECT name, pay, bonus, pay+NVL(bonus,0) AS "이번달 월급"
		FROM T_PROFESSOR WHERE DEPTNO=101;
		* 실습 * 
		교수테이블에서 학과번호가 101번인 교수의 이름, 급여, 보너스, 연봉 조회
		연봉=pay*12 + bonus이고 bonus 받지 못하는 교수님은 0으로 계산해라
		> SELECT name, pay, bonus, pay*12+nvl(bonus,0) AS "연봉"
		FROM T_PROFESSOR WHERE DEPTNO=101;
		* 실습 * 
		교수테이블에서 학과번호가 101번인 교수의 이름, 월급, 보너스를 조회하되 
		bonus 받지 못하는 교수님은 NVL2 를 활용하여 0으로 계산하기
		> SELECT NAME, PAY, NVL2(BONUS,BONUS,0) AS BONUS 
		FROM T_PROFESSOR WHERE DEPTNO=101;
		* 실습 * 
		직원테이블에서 직업이 CLERK인 직원의 직원명, 직업, 교통비를 조회하되
		단, 교통비를 받으면 '교통비받음', 교통비를 받지 못하면 '교통비못받음' 값이 출력될 수 있도록 조회
		> SELECT ENAME, JOB, NVL2(COMM,'교통비못받음','교통비받음') AS 교통비 FROM T_EMP;
	
	1-4) 변환함수 
	묵시적 형변환: SELECT 1+'1' FROM DUAL; >2 
	명시 적형변환: SELECT 1+TO_NUMBER('1') FROM DUAL; > 2 

	- 날짜-> 문자: TO_CHAR(), TO_CHAR(날짜,'형식문자', 지역언어설정) 
		-연도만 출력
		> SELECT SYSDATE AS 현재날짜, TO_CHAR(SYSDATE,'YYYY') AS 연도 FROM DUAL;
		'YYYY': 연도, 'RRRR': Y2K이후 연도형식으로 권장, 'YEAR': 년도 영문표현 
		- 월만 출력 
		> SELECT SYSDATE AS 현재날짜, 
		TO_CHAR(SYSDATE,'MM') AS 월2자리,
		TO_CHAR(SYSDATE,'MON') AS 월3자리,
		TO_CHAR(SYSDATE,'MONTH') AS "월전체(대)",
		TO_CHAR(SYSDATE,'mon') AS "월3자리(소)", 
		TO_CHAR(SYSDATE,'Month') AS "월(첫대)" FROM DUAL;
		- 지역언어 설정
		'NLS_DATE_LANGUAGE=ENGLISH'
		> SELECT SYSDATE AS 현재날짜, 
		TO_CHAR(SYSDATE,'MON','NLS_DATE_LANGUAGE=ENGLISH') AS 월3자리,
		TO_CHAR(SYSDATE,'MON','NLS_DATE_LANGUAGE=KOREAN') AS 월3자리,
		TO_CHAR(SYSDATE,'MONTH','NLS_DATE_LANGUAGE=ENGLISH') AS "월전체(대)" FROM DUAL;
		-일만 출력(한글/ 영어 다름)  
		> SELECT SYSDATE AS 현재날짜, 
		TO_CHAR(SYSDATE,'DD') AS 일2자리,
		TO_CHAR(SYSDATE,'DDTH') AS 몇번째날,
		TO_CHAR(SYSDATE,'DAY','NLS_DATE_LANGUAGE=ENGLISH') AS 요일1,
		TO_CHAR(SYSDATE,'DY','NLS_DATE_LANGUAGE=ENGLISH') AS 요일2  FROM DUAL;
		* 실습 *
		신용카드는 2022년 12월 유효 12/2022
		> SELECT TO_CHAR(SYSDATE, 'MM/YYYY') AS 신용카드  FROM DUAL;
	
	1-5) 날짜함수


2) 그룹 함수 (Aggregate Function)
: 테이블의 여러 데이터를 동시에 입력받아 한개의 결과값이 나옴 





























