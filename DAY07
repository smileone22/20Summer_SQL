DAY 07

*KEYWORD
- 제약조건(constraint)
- 서브쿼리


[ 제약조건 ]
: DBMS에서 데이터 무결성을 보장하기 위해 잘못된 데이터가 저장되는 것을 방지하는 방법

-데이터 무결성? 데이터 무결성이란 저장된 데이터에서 잘못된 데이터가 없어야 한다는 것으로 상황과 시나리오에 따라 다르며 DBMS 자체적으로 제한을 해줘야 함

<데이터 무결성의 종류>
	1. 널 무결성: 테이블 컬럼값이 NULL이 될 수 없다.
	>제약 조건: NOT NULL
	2. 고유 무결성: 특정 컬럼의 속한 값은 서로 달라야 한다.
	>제약 조건: UNIQUE, PRIMARY
	3. 참조 무결성: 참조하는 테이블의 키 값은 NULL이거나 참조할 수 없는 키 값을 가질 수 없다. 
	>제약 조건: FOREIGN KEY
	4. 도메인 무결성: 특정 컬럼 값은 그 컬럼이 정의된 도메인에 속한 값이어야 한다. 
	예를 들어, 성별에는 남, 여 지정
	> 제약 조건: CHECK, DEFAULT
	4. 관계 무결성: 테이블간의 관계에서 참조한 무결성의 값이 변경되면 같이 변경되어야 한다.
	>제약 조건: ON DELETE, ON UPDATE
	5. 개체 무결성: 모든테이블은 각 테이블의 값을 구분할 수 있는 기본키(PK)가 존재해야 한다
	> PRIMARY KEY

<제약조건의 종류 정리>
	1) NOT NULL: NULL값 입력 불가
`	2) UNIQUE: 중복된 값 입력 불가 
	3) PRIMARY KEY: NULL+ UNIQUE
	4) FOREIGN KEY: 참조하고 있는 테이블에 키만 참조 가능
	5) CHECK: 설정된 값만 입력 가능

<제약조건 지정방법>
다른 테이블의 컬럼을 참조할 때, 컬럼명 컬럼타입 references 참조 테이블명(참조 테이블 컬럼)으로 참조.
	단, 다른 테이블의 컬럼을 참조할 경우, 해당 테이블의 컬럼의 컬럼타입과 동일해야 한다.

- CHECK(비교식): 체크 제약조건은 비교식으로 컬럼값이 가질 수 있는 범위 지정 가능 
	
- 제약조건에 위반하는 값을 insert 할 경우, 어떤 제약조건에 위반되었는지 알림메시지가 나오는데, 그 때 나오는 제약조건명은
오라클이 알아서 붙여준 이름이므로, 어떤 테이블의 어떤 컬럼의 제약조건에 위반했는지 알 수 없다. 
 -> 따라서 각 제약조건마다 이름을 붙여줌으로써, 어떤 컬럼이 제약조건에 위반되었는지 지정하고 알 수 있다
-> 지정방법  CONSTRAINT [ 제약조건명 ][ 제약조건 ]
-> 사용자 설정 제약조건 확인방법(테이블명 대문자로)
>SELECT owner, CONSTRAINT_name, CONSTRAINT_type, status FROM user_constraints WHERE table_name='C_EMP';

-제약조건을 설정하면 "딕셔너리"라는 공간에 저장되는데 
딕셔너리(Dictionary)란? 스키마, 사용자, 객체, 권한, 데이터베이스의 정보 등등 오라클 데이터베이스를 운영하는데 필요한 정보를 관리하는 객체
-Constraint_type? a) C- Check/ P- Primary Key / U- Unique / R- References
-제약조건 NOT NULL이 constraint_type이 CHECK인 이유? [컬럼] NOT NULL= CHECK([컬럼] IS NOT NULL)
-status: 상태, enabled: 작동중인 상태 

	1. 테이블 생성과 동시에 제약조건 설정 방법
	CREATE TABLE [테이블명] (
	[ 컬럼명 ][ 자료타입 ][ 제약조건 ] );

	* 실습 * c_emp 테이블을 생성하되, 학번(no)컬럼은 숫자값으로 기본키로 지정하고 
	이름(name) 컬럼은 문자열 값으로 널값을 하용하지 않고
	주민(jumin) 컬럼은 문자열 값으로 널값을 허용하지 않고, 중복값도 허용하지 않으며
	지역(area) 컬럼은 숫자값으로 5보다 작아야한다
	학과(deptno) 컬럼은 문자열 값으로 t_dept2 테이블의 dcode 컬럼을 참조한다. 
	> CREATE TABLE c_emp (
	no NUMBER PRIMARY KEY,
	name VARCHAR2(10) NOT NULL,
	jumin VARCHAR2(13) NOT NULL UNIQUE,
	area NUMBER check(area<5),
	deptno varchar2(6) REFERENCES T_DEPT2(dcode) );

	>컬럼 아래에 제약조건 지정방법: not null은 밑에 적을 수 없다
	>CREATE TABLE c_emp (
	no NUMBER,
	name VARCHAR2(10) NOT NULL,
	jumin VARCHAR2(13) NOT NULL,
	area NUMBER,
	deptno varchar2(6),
	PRIMARY KEY (no),
	UNIQUE (jumin),
	CHECK(area<5),
	FOREIGN KEY(deptno) REFERENCES T_DEPT2(dcode) );

	* 실습 * c_emp 테이블에 다음과 같은 값을 저장
`	no: 1, name: kim, jumin: 801111-1111111, area: 6, deptno: 0001

	2. 테이블 생성 이후, 제약조건 추가하는 방법
	ALTER TABLE [테이블명]
	ADD CONSTRAINT [제약조건명 ][ 제약조건 ] ([컬럼명]);
	
	- 단, NOT NULL 제약조건 추가 시 
	ALTER TABLE [테이블명]
	MODIFY ([컬럼] [컬럼타입] CONSTRAINT [제약조건명] [제약조건]);
	- 컬럼은 NULL값을 허용하므로, NULL값을 허용하는 제약조건을 NULL값을 허용하지 않는 제약조건으로 MODIFY해주어야 함

 	* 실습 *
	CREATE TABLE c_emp (
		no NUMBER, name VARCHAR2(10), jumin VARCHAR2(13), area NUMBER, deptno varchar2(6));
	테이블 만든 뒤, 
	1. NO pk 추가
	ALTER TABLE c_emp ADD CONSTRAINT emp_no_pk PRIMARY KEY(no);
	2. name NOT NULL 추가
	ALTER TABLE c_emp ADD CONSTRAINT emp_name_n NOT NULL(NO); --X
	ALTER TABLE C_EMP MODIFY (name varchar2(10) CONSTRAINT emp_name_nn NOT NULL);
	3. jumin NOT NULL, UNIQUE
	ALTER TABLE C_EMP MODIFY (jumin varchar2(13) CONSTRAINT emp_jumin_nn NOT NULL);
	ALTER TABLE C_EMP ADD CONSTRAINT emp_jumin_uk unique(jumin);
	4. area 에  CHECK 제약조건
	ALTER TABLE c_emp ADD CONSTRAINT emp_area_ck CHECK (area<5);
	5.deptno fk추가
	ALTER TABLE c_emp ADD CONSTRAINT emp_deptno_fk FOREIGN KEY(deptno) REFERENCES T_DEPT2(dcode);

	외래키 설정 시 주의사항? 참조하고 있는 부모 테이블의 컬럼은 PK이거나 UNIQUE 해야 한다
	
<제약 조건 삭제>
ALTER TABLE [테이블명] DROP CONSTRAINT [제약조건명];

	* 실습 * c_emp 테이블에서 NOT NULL 제약조건을 모두 삭제하기
	>ALTER TABLE C_EMP DROP CONSTRAINT EMP_NAME_NN; 
	ALTER TABLE C_EMP DROP CONSTRAINT EMP_JUMIN_NN;
	ALTER TABLE C_EMP DROP CONSTRAINT EMP_DEPTNO_FK;
-FK 로 설정하면 부모 테이블의 데이터를 지울 때, 자식 테이블이 참조하고 있는 컬럼은 삭제 할 수 없다. 
-FK 옵션: 부모테이블에서 참조하고 있는 데이터가 삭제될 시 어떤 처리를 할지 지정해야 한다
	1) 같이 삭제해라: ON DELETE CASCADE
	2) NULL로 지정해라: ON DELETE SET NULL
- ON UPDATE 옵션: Oracle 은 없음 
- 제약조건 관리: 테이블 각 컬럼에 지정된 제약조건을 일시적으로 동작을 중지할 수 있다
	stauts: enable: 동작중 / disable: 작동중지
-DISABLE 방법? ALTER TABLE [테이블명] DISABLE CONSTRAINT [제약조건명];
	* 실습 * c_emp 테이블에서 area 제약조건 작동 중지 확인 
	>ALTER TABLE c_emp disable CONSTRAINT emp_area_ck;
	>SELECT owner, CONSTRAINT_name, CONSTRAINT_type, status FROM user_constraints WHERE table_name='C_EMP'; 





[ 서브 쿼리 ]
: 쿼리 안에 존재하는 쿼리(부쿼리)
	ex. t_emp 테이블에서 scott의 급여 조회? SELECT ename, SAL FROM T_EMP WHERE ename='SCOTT';
	하지만, SCOTT의 급여보다 많이 받는 사람의 이름 조회하려면 스콧의 급여를 알고 이를 활용하여 쿼리문을 작성해야 한다.
	 
주의 사항? 
1. 서브쿼리는 연산자의 오른쪽에 위치
2. 반드시 괄호로 묶어야 함
3. 단일행서브쿼리인지, 다중행 서브쿼리인지에 따라 연산자를 적절하게 선택 
4. 서브쿼리 내에서는 ORDER BY  불가능함
5. 서브쿼리는 SELECT 하나만 가능

서브쿼리의 구조?
SELECT [컬럼]
FROM [테이블명]
WHERE [비교컬럼] [연산자] ([서브쿼리]);

	* 실습 * t_emp 테이블에서 SMITH의 급여보다 많이 받는 사람의 이름과 급여 조회
	>SELECT ENAME, SAL FROM T_EMP WHERE SAL>(SELECT SAL FROM T_EMP WHERE ENAME='SMITH');


<단일행 서브쿼리>
: 서브쿼리의 결과가 한 행만 나오는 행
-단일행 서브퀘리에서 사용할 수 있는 연산자: =, <>, >, >=, <, <=

	* 실습 * 학생테이블에서 가장 키가 큰 사람의 키를 조회
	> SELECT name, HEIGHT FROM T_STUDENT WHERE height=(SELECT max(height) FROM T_STUDENT);

	* 실습 * 교수테이블에서 연봉을 제일 많이 받는 교수의 성함과 연봉을 조회
	>SELECT name, pay FROM T_PROFESSOR WHERE pay=(SELECT max(pay) FROM T_PROFESSOR);
	>(확인)SELECT name, PAY FROM T_PROFESSOR ORDER BY PAY DESC;

	* 실습 * 학생 테이블, 학과 테이블을 사용해서 이윤나 학생과 전공1이 동일한 학생의 이름과 전공1의 이름을 조회
	>SELECT s.name,d.dname FROM T_STUDENT s , T_DEPARTMENT d 
	WHERE s.DEPTNO1=d.DEPTNO AND s.DEPTNO1=(SELECT DEPTNO1 FROM T_STUDENT WHERE name='이윤나') ;

	* 실습 * 직원테이블과 부서테이블을 이용해서 SMITH와 같은 부서번호를 가진 직원의
	직원명과 부서명과 지역명을 조회 
	> SELECT e.ENAME, DNAME, LOC FROM T_EMP e, T_DEPT d 
	WHERE d.DEPTNO=e.DEPTNO AND  d.DEPTNO=(SELECT DEPTNO FROM T_EMP WHERE ename='SMITH');

	* 실습 * 교수테이블과 학과테이블을 이용해서
	입사일이 송도권 교수님보다 나중에 입사한 교수의 이름, 입사일, 학과명 조회
	>SELECT p.name, p.hiredate, d.dname FROM T_PROFESSOR p, T_DEPARTMENT d
	WHERE p.deptno = d.DEPTNO AND p.HIREDATE>(SELECT HIREDATE FROM T_PROFESSOR WHERE name='송도권');

	* 실습 * 학생테이블에서 전공1이 101번인 학과의 평균 몸무게보다
	몸무게가 적은 학생의 이름과 몸무게를 조회
	> SELECT name, weight FROM T_STUDENT WHERE WEIGHT<(SELECT AVG(weight) FROM T_STUDENT WHERE DEPTNO1=101);
	
	* 실습 * 교수테이블에서 심슨교수와 같은 입사일에 입사한 교수 중
	조인형 교수보다 월급을 적게받는 교수의 이름, 급여, 입사일 조회
	>SELECT name, pay, HIREDATE FROM T_PROFESSOR 
	WHERE HIREDATE=(SELECT HIREDATE FROM T_PROFESSOR WHERE name='심슨') 
	AND pay<(SELECT pay FROM T_PROFESSOR WHERE name='조인형');


<다중행 서브쿼리>
: 서브쿼리의 결과가 여러 행의 나오는 쿼리 

-다중행 서브퀘리에서 사용할 수 있는 연산자
1) IN:	여러 행중에 같은 값이 포함되는가 
 	>ANY: 최솟값보다 큰 값인가 
 	<ANY: 최대값보다 작은 값인가 
 	>ALL : 최대값보다 큰 값인가 
 	<ALL : 최솟값보다 작은 값인가 
ex. v=101일때 v>ANY IN {100, 200, 300, 400} : O
    v=80일때 v>ANY IN {100, 200, 300, 400} : X
    v=401일때 v<ANY IN {100, 200, 300, 400} : X
    v=80일때 v<ANY IN {100, 200, 300, 400} : O

	* 실습 * 직원테이블(t_emp2)과 부서테이블(t_dept2)을 이용해서 근무지역(area)이 서울지사인
	모든 사원들의 사번(empno),이름(name), 부서명(dname) 조회
	>SELECT e.EMPNO ,e.name, d.DNAME FROM T_EMP2 e, T_DEPT2 d
	WHERE e.DEPTNO=d.DCODE AND e.DEPTNO IN ( SELECT dcode FROM T_DEPT2 WHERE area='서울지사'); 

	* 실습 * 직원2테이블에서 전체직원중 과장 직급의 최소연봉자보다 연봉이 높은 사람의
	이름, 직급, 연봉 조회
	>SELECT name, post, pay FROM T_EMP2 WHERE pay>ANY (SELECT pay FROM T_EMP2 WHERE post='과장 ');

	* 실습 * 학생테이블에서 전체 학생 중에서 4학년 학생들의 몸무게에서 
	가장 몸무게가 적게 나가는 학생보다 몸무게가 적은 학생의 이름,학년, 몸무게 조회
	>SELECT name, grade, WEIGHT FROM T_STUDENT
	WHERE WEIGHT<ALL (SELECT WEIGHT FROM T_STUDENT WHERE GRADE=4);

	* 실습 * 교수테이블에서 조교수의 입사일이 가장느린사람보다 
	빠른 교수의 이름, 직위, 입사일 조회
	>SELECT name, position, HIREDATE FROM T_PROFESSOR
	WHERE HIREDATE<ANY (SELECT HIREDATE FROM T_PROFESSOR WHERE position='조교수');

2) 

























